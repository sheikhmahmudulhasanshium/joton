======================================================================
PROJECT PROPOSAL: HOSPITAL MANAGEMENT SYSTEM (HMS)
A Strategic Roadmap for a Solo Developer Portfolio Project
======================================================================

1. PROJECT VISION & GOALS
-------------------------
To develop a modern, scalable, and feature-rich Hospital Management System (HMS) as a key portfolio piece. This project will showcase full-stack development proficiency using a modern technology stack (Next.js, NestJS, MongoDB). The development process is strategically broken into three tiers (Starter, Standard, Advanced) to ensure a manageable workflow, resulting in a deployable and impressive application at each stage.

The entire project will be built and deployed using **free-tier services only**, with no requirement for credit card credentials.


2. CORE TECHNOLOGY STACK
------------------------
*   Frontend: Next.js (with TypeScript), Tailwind CSS
*   Backend: NestJS (with TypeScript)
*   Database: MongoDB (via MongoDB Atlas Free Tier M0 Cluster)
*   Authentication: Google Console OAuth 2.0, JSON Web Tokens (JWT) for local auth
*   Email Notifications: Nodemailer (with a free service like Gmail for development/demo)
*   Deployment: Vercel Hobby Plan (for both frontend and backend repositories)


3. DEVELOPMENT STRATEGY FOR A SOLO DEVELOPER
--------------------------------------------
Your biggest challenge is managing scope. This plan is designed to mitigate that risk.

1.  **Iterate, Don't Overbuild:** Focus entirely on completing the STARTER TIER (MVP) first. A finished, polished MVP is infinitely more valuable than a half-finished, buggy advanced system.

2.  **Backend First, Then Frontend:** For each feature, build and test the backend API endpoint first using a tool like Postman or Insomnia. Only when the backend logic is confirmed to be working should you build the frontend UI to consume it.

3.  **Simplify User Roles:** The initial list of user roles is ambitious. We will start with three essential roles (Admin, Doctor, Patient) to build a solid, manageable foundation.


4. STEP-BY-STEP EXECUTION PLAN
------------------------------

---
**Phase 1: Foundation & Planning (Estimated Timeline: 1 Week)**
---
1.  Architecture & Schema Design: Finalize the MongoDB schema (`users`, `staff_profiles`, etc.). Map out the core API endpoints.
2.  Project Scaffolding: Create two separate Git repositories: `hms-backend` and `hms-frontend`.
3.  Environment Setup: Configure MongoDB Atlas, Google Cloud Console for OAuth, and initialize `.env` files with all keys.

---
**Phase 2: Core Backend Development (Estimated Timeline: 3-4 Weeks)**
---
1.  Database & Auth Module: Implement the `users` collection and the complete authentication system (local + Google OAuth).
2.  JWT & Role-Based Access Control (RBAC): Implement JWT strategy and create custom Guards in NestJS for role protection.
3.  Core Profile & Department Modules: Create the basic CRUD endpoints for `staff_profiles`, `patient_profiles`, and `departments`.
4.  Initial Deployment: Deploy this core backend to Vercel to get a live API URL.

---
**Phase 3: Core Frontend Development (Estimated Timeline: 3-4 Weeks)**
---
1.  Design System & Layout: Set up Tailwind CSS. Create reusable components and the main application layout (sidebar, navbar).
2.  API & State Management: Create an API service layer (e.g., using Axios). Set up state management (Zustand or React Context).
3.  Auth Flow & Protected Routes: Build the Login/Register pages and implement protected routes.

---
**Phase 4: Iterative Feature Implementation (Ongoing)**
---
Follow the tiers below. For each feature, complete the backend and then the frontend before moving to the next.


5. PROJECT TIERS, TIMELINES, AND FEATURES
-----------------------------------------

------------------------------------------------------
| TIER 1: STARTER (The MVP - Minimum Viable Product) |
------------------------------------------------------
*   Goal: Build a complete, functional, and deployable application. This is your primary objective.
*   Estimated Solo Timeline: 8 - 10 Weeks
*   Estimated Freelance Value: $4,000 - $6,000
*   Number of Revisions: N/A (Portfolio Project)
*   Features:
    *   User Roles: Admin, Doctor, Patient.
    *   Core Pages:
        *   Modern Landing Page
        *   Full Authorization Flow (Login, Register, Google Sign-in)
        *   User Profile Page (view/edit own details)
        *   Role-based Dashboard
        *   Basic Settings Page (change password)
    *   Key Modules:
        *   ✔️ Full User Authentication: Local (Email/Password) + Google OAuth.
        *   ✔️ Role-Based Access Control (RBAC): Secure endpoints and UI.
        *   ✔️ Appointment Scheduling: Patients request; Doctors/Admins manage.
        *   ✔️ User Profile Management: Users can view and edit their own profiles.
*   Deliverables:
    *   Live, deployed Vercel links for both frontend and backend.
    *   Clean GitHub repositories with detailed README.md files.

-----------------------------------------------
| TIER 2: STANDARD (The First Expansion)      |
-----------------------------------------------
*   Goal: Expand the MVP with valuable new modules.
*   Estimated Solo Timeline: Additional +8 - 12 Weeks (after completing the MVP)
*   Estimated Freelance Value: Additional +$5,000 - $8,000
*   Features:
    *   All features from Starter Tier.
    *   ✔️ Notifications System: In-app notifications and email alerts via Nodemailer.
    *   ✔️ Announcements Module: Admin panel to create and broadcast announcements.
    *   ✔️ Read-Only Inventory Viewers: Pages to view Pharmacy and Blood Bank stock (read-only).
    *   ✔️ Calendar View: Integrate a library like `react-big-calendar` for visual appointment display.
    *   ✔️ Departments Module (Full CRUD): Admins can create, update, and delete departments.
*   Deliverables:
    *   Updated live application with all new features deployed.
    *   Updated GitHub repositories with new code and documentation.

-----------------------------------------------
| TIER 3: ADVANCED (Future Enhancements)      |
-----------------------------------------------
*   Goal: Showcase advanced skills by tackling more complex features.
*   Estimated Solo Timeline: Additional +12-16 Weeks or more
*   Estimated Freelance Value: Varies greatly per module.
*   Potential Modules to Add:
    *   ✔️ Full Inventory Management: Upgrade viewers to full CRUD systems with stock management.
    *   ✔️ Analytics Dashboard: Admin page with charts and stats (e.g., using Recharts).
    *   ✔️ Advanced Search & Filtering: Implement a global search or advanced table filtering.
    *   ✔️ Mock Payment Portal: UI for invoices and simulated payments.
    *   ✔️ Informational Pages: Simple static pages for FAQs, T&C, and Privacy Policy.
*   Deliverables:
    *   A highly feature-rich application demonstrating mastery of complex full-stack development.